



public static Node<Integer> bubbleSort(Node<Integer> First)
 	{
       	Node <Integer> temp = First;
       	Integer value;
       	
       	for(int i=0; i<getLength(First)-1; i++)
       	{
 	       	while (temp.getNext() != null)
            	{
 	if(temp.getValue().compareTo(temp.getNext().getValue()) > 0)
                 	{
                       	value = temp.getValue();
                       	temp.setValue(temp.getNext().getValue());
                       	temp.getNext().setValue(value);
                 	}
                 	temp = temp.getNext();
            	}
            	temp = First;
       	}
       	return First;
       	
 	}
  
  public static int getLength (Node<Integer> First)
 	{
       	int len = 1;
       	Node<Integer> temp = First;
       	
       	while(temp.getNext() != null)
       	{
            	len++;
            	temp = temp.getNext();
       	}
       	
       	return len;
 	}
  
  public static int sumList(Node<Integer> n) 
  {
          	if (n.getNext() == null)
                 	return n.getValue();
          	
          	return n.getValue() + sumList(n.getNext());
  }
  
  public static boolean checkOrder(Node<Integer> n) 
  {
          	if (n.getNext() == null)
                 	return true;
          	
          	else if (n.getNext().getValue() > n.getValue())
                 	return checkOrder(n.getNext());
          	
          	return false;
  }
  
  public static void cleanDuplicates(Node<Integer> head) 
  {
                 	
          	Node<Integer> n = head;
          	Node<Integer> m = n;
          	int value;
          	
          	while (n.hasNext()) 
            {
                 	
                 	value=n.getValue();
                 	int size = getLength(n);
                 	
                 	while( size>1 && n!=null && n.hasNext())
                 	{
                       	if(value == n.getNext().getValue())
                       	{
                              	n.setNext(n.getNext().getNext());
                       	}
                       	n = n.getNext();
                       	size--;
                 	}
                 	
                 	if(m.hasNext())
                 	{
                       	n=m.getNext();
                       	m=m.getNext();
                 	}
          	}  	
   	}
    
    public static void print(Node<Integer> head) 
    {
          	Node<Integer> N = head;
          	while (N != null) 
            {
                 	System.out.print(N.getValue() + ", ");
                 	N = N.getNext();
          	}
          	System.out.println();
   	}
    
    public static Node<Integer> build(int n) 
    {
          	Random rnd = new Random();
          	Node<Integer> A = new Node<Integer>(rnd.nextInt(10) + 1);
          	Node<Integer> pos = A;
          	for (int i = 0; i < n - 1; i++) 
           {
                 	Node<Integer> r = new Node(rnd.nextInt(10) + 1);
                 	pos.setNext(r);
                 	pos = pos.getNext();
          	}
          	return A;
   	}
  
    public static Node<Integer> subtracLists(Node<Integer> head1, Node<Integer> head2) 
    {
          	Node<Integer> head = new Node<Integer>(0);
          	Node<Integer> ist = head;
          	Node<Integer> ist1 = head1;
          	Node<Integer> ist2 = head2;
          	head = ist1;
          	while (ist1.hasNext()) 
           {
                 	ist1 = ist1.getNext();
          	}
          	ist1.setNext(ist2);
          	return head;
   	}
 
    public static Node<Integer> newN(Node<Integer> head1, Node<Integer> head2) 
    {
          	Node<Integer> head = new Node<Integer>(head1.getValue() + head2.getValue());
          	Node<Integer> ist = head;
          	Node<Integer> ist1 = head1;
          	Node<Integer> ist2 = head2;
          	int sum = 0;
          	ist1=ist1.getNext();
          	ist2=ist2.getNext();
          	while (ist1 != null && ist2 != null) 
           {
                 	sum = 0;
                 	sum += ist1.getValue();
                 	ist1 = ist1.getNext();
                 	sum += ist2.getValue();
                 	ist2 = ist2.getNext();
                 	Node<Integer> summ = new Node<Integer>(sum);
                 	ist.setNext(summ);
                 	ist = ist.getNext();
          	}
          	if (ist1 != null) 
           {
                 	while (ist1 != null) 
                  {
                       	sum = 0;
                       	sum += ist1.getValue();
                       	ist1 = ist1.getNext();
                       	Node<Integer> sum1 = new Node<Integer>(sum);
                       	ist.setNext(sum1);
                       	ist = ist.getNext();
                 	}
          	}
         
         if (ist2 != null) 
         {
                 	while (ist2 != null) 
                  {
                       	sum = 0;
                       	sum += ist2.getValue();
                       	ist2 = ist2.getNext();
                       	Node<Integer> sum2 = new Node<Integer>(sum);
                       	ist.setNext(sum2);
                       	ist = ist.getNext();
                 	}
          	}
          	return head;
   	}

    public static Node<Integer> subtracLists(Node<Integer> head1, Node<Integer> head2) 
    {
          	Node<Integer> head = new Node<Integer>(0);
          	boolean f = true;
          	Node<Integer> ist = head;
          	Node<Integer> ist1 = head1;
          	Node<Integer> ist2 = head2;
          	while (ist1 != null && ist2 != null && f) 
           {
                 	boolean a = true;
                 	int n = ist1.getValue();
                 	while (ist2 != null && a) 
                  {
                       	if (ist2.getValue() != n) 
                        {
                              	ist2 = ist2.getNext();
                       	} else 
                        {
                              	a = false;
                       	}
                 	}
                 	if (a) 
                  {
                       	ist.setValue(n);
                       	f = false;
                 	} else 
                  {
                       	ist1 = ist1.getNext();
                       	ist2 = head2;
                 	}
          	}
          	ist1 = ist1.getNext();
          	ist2 = head2;
          	while (ist1 != null && ist2 != null) 
           {
                 	boolean a = true;
                 	int n = ist1.getValue();
                 	while (ist2 != null && a) 
                  {
                       	if (ist2.getValue() != n) 
                        {
                              	ist2 = ist2.getNext();
                       	} else 
                        {
                              	a = false;
                       	}
                 	}
                 	if (a) 
                  {
                       	Node<Integer> istHead = new Node<Integer>(ist1.getValue());
                       	ist.setNext(istHead);
                       	ist = ist.getNext();
                 	}
                 	ist1 = ist1.getNext();
                 	ist2 = head2;
          	}
          	return head;
   	}
  
    public static int due(Node<Integer> head) {
          	int sum = head.getValue();
          	int count = 0;
          	Node<Integer> N = head;
 
          	while (N != null) {
                 	N = N.getNext();
                 	count++;
                 	if (count % 2 == 0 && N != null) {
                       	sum += N.getValue();
                 	}
          	}
          	return sum;
   	}
    
    // הפונקציה מקבלת רשימה ומספר
	//הפונקציה מחזירה את הרשימה ללא האיברים בהם הופיע המספר
	public static Node<Integer> DeleteNodesByNum(Node<Integer> N, int num) {
		Node<Integer> head = N;
		// אם יש מספר אסור באיבר הראשון מקדמים את הרשימה כולה קדימה, מוחקים את האיבר
		// הראשון
		if (head.getValue() == num) {
			N = head.getNext();
		}
		// בדיקת מתקדמת על מספר אסור
		while (head.hasNext()) {
			// אם המספר הבא אחרי הקיים הוא האסור, ויש שני איברים קדימה, מדלגים על האיבר הבא
			if (head.getNext().getValue() == num && head.getNext().hasNext()) {
				System.out.println(head.getNext().getValue());
				// האיבר הבא הוא מה שהיה קודם שניים קדימה
				head.setNext(head.getNext().getNext());
			}
			// אם אין שניים קדימה, אבל יש מספר אסור
			else if (head.getNext().getValue() == num) {

				System.out.println(head.getNext().getValue());
				// אנחנו יודעים שאין שניים קדימה, ולכן זה סוף הרשימה, אז מגדירים את האיבר הבא
				// כנאל
				head.setNext(null);
				// ידוע שזה האיבר האחרון ואין סיבה להמשיך את הבדיקה
				return N;
			}
			// אם לא מצאנו איברים אסורים, מתקדמים
			else {
				head = head.getNext();
			}
		}
		return N;
	}

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
